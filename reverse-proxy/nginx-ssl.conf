user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    add_header X-Cache $upstream_cache_status;
    proxy_cache_path  /data/nginx/cache  levels=1:2 keys_zone=STATIC:10m inactive=24h  max_size=1g;
    client_max_body_size 20M; 

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    server {
      listen 8080;
      server_name pplex.ch;

      location /api/purge-cache {
        content_by_lua_block {
          os.execute("./bin/purge-cache.sh")
        } 
      }

      location /.well-known/acme-challenge/ {
        root /var/www/certbot;
      }

      location / {
        return 301 https://$host$request_uri;
      } 
    }

    server {
      listen 443 ssl;
      server_name pplex.ch;

      ssl_certificate /etc/ssl/certs/WildPPLEX-Bundle.crt;
      ssl_certificate_key /etc/ssl/private/wildpplex.key;

      location /services/pictures {
        root /var/www/html;
      }
      
      location /api/purge-cache {
        content_by_lua_block {
          os.execute("./bin/purge-cache.sh")
        } 
      }

      location /api/admin {
        proxy_pass http://cms;
      }

      location /api/ {
        proxy_pass http://cms;
        proxy_cache STATIC;
        proxy_ignore_headers Set-Cookie;
        proxy_cache_methods GET HEAD POST;
        proxy_cache_valid 200 302 10d;
        proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
      }

      location /adminer/ {
        proxy_pass http://adminer:8080;
      }

      location / {
        proxy_intercept_errors on;
        error_page 500 = @errors;
        error_page 404 = @errors;
        proxy_pass http://nuxt:3000;
        proxy_cache STATIC;
        proxy_cache_valid 200 302 10d;
        proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
        set_by_lua $no_cache '
          if ngx.var.cookie_LANG == "" or ngx.var.cookie_LANG == nil then
          return 1
          end
          return ""
        ';
        proxy_cache_bypass $no_cache;
      }

      location @errors {
        if ($request_uri ~ .(jpg|jpeg|png|gif|ico|svg)) {
          return 404;
        }

        return 301 /;
      }
    }
}

  
